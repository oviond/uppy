{"version":3,"names":["AbortController","MB","defaultOptions","getChunkSize","file","Math","ceil","size","onProgress","onPartComplete","onSuccess","onError","err","ensureInt","value","parseInt","TypeError","pausingUploadReason","Symbol","_abortController","_classPrivateFieldLooseKey","_chunks","_chunkState","_data","_file","_uploadHasStarted","_onError","_onSuccess","_shouldUseMultipart","_isRestoring","_onReject","_maxMultipartParts","_minPartSize","_initChunks","_createUpload","_resumeUpload","_onPartProgress","_onPartComplete","_abortUpload","MultipartUploader","constructor","data","options","_this$options","_this$options$getChun","Object","defineProperty","_abortUpload2","_resumeUpload2","_createUpload2","_initChunks2","writable","cause","_classPrivateFieldLooseBase","index","ev","lengthComputable","uploaded","loaded","totalUploaded","reduce","n","c","etag","done","part","PartNumber","ETag","shouldUseMultipart","uploadId","key","start","signal","aborted","abort","companionComm","restoreUploadFile","pause","opts","_opts","undefined","really","chunkState","fileSize","Boolean","chunkSize","max","arraySize","floor","Array","offset","j","end","min","getData","i2","slice","onComplete","setAsUploaded","map","uploadFile","then","resumeUploadFile","abortFileUpload","catch","log"],"sources":["MultipartUploader.js"],"sourcesContent":["import { AbortController } from '@uppy/utils/lib/AbortController'\n\nconst MB = 1024 * 1024\n\nconst defaultOptions = {\n  getChunkSize (file) {\n    return Math.ceil(file.size / 10000)\n  },\n  onProgress () {},\n  onPartComplete () {},\n  onSuccess () {},\n  onError (err) {\n    throw err\n  },\n}\n\nfunction ensureInt (value) {\n  if (typeof value === 'string') {\n    return parseInt(value, 10)\n  }\n  if (typeof value === 'number') {\n    return value\n  }\n  throw new TypeError('Expected a number')\n}\n\nexport const pausingUploadReason = Symbol('pausing upload, not an actual error')\n\n/**\n * A MultipartUploader instance is used per file upload to determine whether a\n * upload should be done as multipart or as a regular S3 upload\n * (based on the user-provided `shouldUseMultipart` option value) and to manage\n * the chunk splitting.\n */\nclass MultipartUploader {\n  #abortController = new AbortController()\n\n  /** @type {import(\"../types/chunk\").Chunk[]} */\n  #chunks\n\n  /** @type {{ uploaded: number, etag?: string, done?: boolean }[]} */\n  #chunkState\n\n  /**\n   * The (un-chunked) data to upload.\n   *\n   * @type {Blob}\n   */\n  #data\n\n  /** @type {import(\"@uppy/core\").UppyFile} */\n  #file\n\n  /** @type {boolean} */\n  #uploadHasStarted = false\n\n  /** @type {(err?: Error | any) => void} */\n  #onError\n\n  /** @type {() => void} */\n  #onSuccess\n\n  /** @type {import('../types/index').AwsS3MultipartOptions[\"shouldUseMultipart\"]} */\n  #shouldUseMultipart\n\n  /** @type {boolean} */\n  #isRestoring\n\n  #onReject = (err) => (err?.cause === pausingUploadReason ? null : this.#onError(err))\n\n  #maxMultipartParts = 10_000\n\n  #minPartSize = 5 * MB\n\n  constructor (data, options) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    }\n    // Use default `getChunkSize` if it was null or something\n    this.options.getChunkSize ??= defaultOptions.getChunkSize\n\n    this.#data = data\n    this.#file = options.file\n    this.#onSuccess = this.options.onSuccess\n    this.#onError = this.options.onError\n    this.#shouldUseMultipart = this.options.shouldUseMultipart\n\n    // When we are restoring an upload, we already have an UploadId and a Key. Otherwise\n    // we need to call `createMultipartUpload` to get an `uploadId` and a `key`.\n    // Non-multipart uploads are not restorable.\n    this.#isRestoring = options.uploadId && options.key\n\n    this.#initChunks()\n  }\n\n  // initChunks checks the user preference for using multipart uploads (opts.shouldUseMultipart)\n  // and calculates the optimal part size. When using multipart part uploads every part except for the last has\n  // to be at least 5 MB and there can be no more than 10K parts.\n  // This means we sometimes need to change the preferred part size from the user in order to meet these requirements.\n  #initChunks () {\n    const fileSize = this.#data.size\n    const shouldUseMultipart = typeof this.#shouldUseMultipart === 'function'\n      ? this.#shouldUseMultipart(this.#file)\n      : Boolean(this.#shouldUseMultipart)\n\n    if (shouldUseMultipart && fileSize > this.#minPartSize) {\n      // At least 5MB per request:\n      let chunkSize = Math.max(this.options.getChunkSize(this.#data), this.#minPartSize)\n      let arraySize = Math.floor(fileSize / chunkSize)\n\n      // At most 10k requests per file:\n      if (arraySize > this.#maxMultipartParts) {\n        arraySize = this.#maxMultipartParts\n        chunkSize = fileSize / this.#maxMultipartParts\n      }\n      this.#chunks = Array(arraySize)\n\n      for (let offset = 0, j = 0; offset < fileSize; offset += chunkSize, j++) {\n        const end = Math.min(fileSize, offset + chunkSize)\n\n        // Defer data fetching/slicing until we actually need the data, because it's slow if we have a lot of files\n        const getData = () => {\n          const i2 = offset\n          return this.#data.slice(i2, end)\n        }\n\n        this.#chunks[j] = {\n          getData,\n          onProgress: this.#onPartProgress(j),\n          onComplete: this.#onPartComplete(j),\n          shouldUseMultipart,\n        }\n        if (this.#isRestoring) {\n          const size = offset + chunkSize > fileSize ? fileSize - offset : chunkSize\n          // setAsUploaded is called by listPart, to keep up-to-date the\n          // quantity of data that is left to actually upload.\n          this.#chunks[j].setAsUploaded = () => {\n            this.#chunks[j] = null\n            this.#chunkState[j].uploaded = size\n          }\n        }\n      }\n    } else {\n      this.#chunks = [{\n        getData: () => this.#data,\n        onProgress: this.#onPartProgress(0),\n        onComplete: this.#onPartComplete(0),\n        shouldUseMultipart,\n      }]\n    }\n\n    this.#chunkState = this.#chunks.map(() => ({ uploaded: 0 }))\n  }\n\n  #createUpload () {\n    this\n      .options.companionComm.uploadFile(this.#file, this.#chunks, this.#abortController.signal)\n      .then(this.#onSuccess, this.#onReject)\n    this.#uploadHasStarted = true\n  }\n\n  #resumeUpload () {\n    this\n      .options.companionComm.resumeUploadFile(this.#file, this.#chunks, this.#abortController.signal)\n      .then(this.#onSuccess, this.#onReject)\n  }\n\n  #onPartProgress = (index) => (ev) => {\n    if (!ev.lengthComputable) return\n\n    this.#chunkState[index].uploaded = ensureInt(ev.loaded)\n\n    const totalUploaded = this.#chunkState.reduce((n, c) => n + c.uploaded, 0)\n    this.options.onProgress(totalUploaded, this.#data.size)\n  }\n\n  #onPartComplete = (index) => (etag) => {\n    // This avoids the net::ERR_OUT_OF_MEMORY in Chromium Browsers.\n    this.#chunks[index] = null\n    this.#chunkState[index].etag = etag\n    this.#chunkState[index].done = true\n\n    const part = {\n      PartNumber: index + 1,\n      ETag: etag,\n    }\n    this.options.onPartComplete(part)\n  }\n\n  #abortUpload () {\n    this.#abortController.abort()\n    this.options.companionComm.abortFileUpload(this.#file).catch((err) => this.options.log(err))\n  }\n\n  start () {\n    if (this.#uploadHasStarted) {\n      if (!this.#abortController.signal.aborted) this.#abortController.abort(pausingUploadReason)\n      this.#abortController = new AbortController()\n      this.#resumeUpload()\n    } else if (this.#isRestoring) {\n      this.options.companionComm.restoreUploadFile(this.#file, { uploadId: this.options.uploadId, key: this.options.key })\n      this.#resumeUpload()\n    } else {\n      this.#createUpload()\n    }\n  }\n\n  pause () {\n    this.#abortController.abort(pausingUploadReason)\n    // Swap it out for a new controller, because this instance may be resumed later.\n    this.#abortController = new AbortController()\n  }\n\n  abort (opts = undefined) {\n    if (opts?.really) this.#abortUpload()\n    else this.pause()\n  }\n\n  // TODO: remove this in the next major\n  get chunkState () {\n    return this.#chunkState\n  }\n}\n\nexport default MultipartUploader\n"],"mappings":"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"}