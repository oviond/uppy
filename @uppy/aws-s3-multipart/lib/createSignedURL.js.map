{"version":3,"names":["createCanonicalRequest","_ref","method","CanonicalUri","CanonicalQueryString","SignedHeaders","HashedPayload","headerKeys","Object","keys","map","k","toLowerCase","sort","join","ec","TextEncoder","algorithm","name","hash","digest","data","subtle","globalThis","crypto","encode","generateHmacKey","secret","importKey","arrayBufferToHexString","arrayBuffer","byteArray","Uint8Array","hexString","i","length","toString","padStart","key","sign","createSignedURL","_ref2","accountKey","accountSecret","sessionToken","bucketName","Key","Region","expires","uploadId","partNumber","Service","host","encodeURI","payload","requestDateTime","Date","toISOString","replace","date","slice","scope","url","URL","searchParams","set","canonical","search","hashedCanonical","stringToSign","kDate","kRegion","kService","kSigning","signature"],"sources":["createSignedURL.js"],"sourcesContent":["/**\n * Create a canonical request by concatenating the following strings, separated\n * by newline characters. This helps ensure that the signature that you\n * calculate and the signature that AWS calculates can match.\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html#create-canonical-request\n *\n * @param {object} param0\n * @param {string} param0.method – The HTTP method.\n * @param {string} param0.CanonicalUri – The URI-encoded version of the absolute\n * path component URL (everything between the host and the question mark\n * character (?) that starts the query string parameters). If the absolute path\n * is empty, use a forward slash character (/).\n * @param {string} param0.CanonicalQueryString – The URL-encoded query string\n * parameters, separated by ampersands (&). Percent-encode reserved characters,\n * including the space character. Encode names and values separately. If there\n * are empty parameters, append the equals sign to the parameter name before\n * encoding. After encoding, sort the parameters alphabetically by key name. If\n * there is no query string, use an empty string (\"\").\n * @param {Record<string, string>} param0.SignedHeaders – The request headers,\n * that will be signed, and their values, separated by newline characters.\n * For the values, trim any leading or trailing spaces, convert sequential\n * spaces to a single space, and separate the values for a multi-value header\n * using commas. You must include the host header (HTTP/1.1), and any x-amz-*\n * headers in the signature. You can optionally include other standard headers\n * in the signature, such as content-type.\n * @param {string} param0.HashedPayload – A string created using the payload in\n * the body of the HTTP request as input to a hash function. This string uses\n * lowercase hexadecimal characters. If the payload is empty, use an empty\n * string as the input to the hash function.\n * @returns {string}\n */\nfunction createCanonicalRequest ({\n  method = 'PUT',\n  CanonicalUri = '/',\n  CanonicalQueryString = '',\n  SignedHeaders,\n  HashedPayload,\n}) {\n  const headerKeys = Object.keys(SignedHeaders).map(k => k.toLowerCase()).sort()\n  return [\n    method,\n    CanonicalUri,\n    CanonicalQueryString,\n    ...headerKeys.map(k => `${k}:${SignedHeaders[k]}`),\n    '',\n    headerKeys.join(';'),\n    HashedPayload,\n  ].join('\\n')\n}\n\nconst ec = new TextEncoder()\nconst algorithm = { name: 'HMAC', hash: 'SHA-256' }\n\nasync function digest (data) {\n  const { subtle } = globalThis.crypto\n  return subtle.digest(algorithm.hash, ec.encode(data))\n}\n\nasync function generateHmacKey (secret) {\n  const { subtle } = globalThis.crypto\n  return subtle.importKey('raw', typeof secret === 'string' ? ec.encode(secret) : secret, algorithm, false, ['sign'])\n}\n\nfunction arrayBufferToHexString (arrayBuffer) {\n  const byteArray = new Uint8Array(arrayBuffer)\n  let hexString = ''\n  for (let i = 0; i < byteArray.length; i++) {\n    hexString += byteArray[i].toString(16).padStart(2, '0')\n  }\n  return hexString\n}\n\nasync function hash (key, data) {\n  const { subtle } = globalThis.crypto\n  return subtle.sign(algorithm, await generateHmacKey(key), ec.encode(data))\n}\n\n/**\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html\n * @param {Record<string,string>} param0\n * @returns {Promise<URL>} the signed URL\n */\nexport default async function createSignedURL ({\n  accountKey, accountSecret, sessionToken,\n  bucketName,\n  Key, Region,\n  expires,\n  uploadId, partNumber,\n}) {\n  const Service = 's3'\n  const host = `${bucketName}.${Service}.${Region}.amazonaws.com`\n  const CanonicalUri = `/${encodeURI(Key)}`\n  const payload = 'UNSIGNED-PAYLOAD'\n\n  const requestDateTime = new Date().toISOString().replace(/[-:]|\\.\\d+/g, '') // YYYYMMDDTHHMMSSZ\n  const date = requestDateTime.slice(0, 8) // YYYYMMDD\n  const scope = `${date}/${Region}/${Service}/aws4_request`\n\n  const url = new URL(`https://${host}${CanonicalUri}`)\n  // N.B.: URL search params needs to be added in the ASCII order\n  url.searchParams.set('X-Amz-Algorithm', 'AWS4-HMAC-SHA256')\n  url.searchParams.set('X-Amz-Content-Sha256', payload)\n  url.searchParams.set('X-Amz-Credential', `${accountKey}/${scope}`)\n  url.searchParams.set('X-Amz-Date', requestDateTime)\n  url.searchParams.set('X-Amz-Expires', expires)\n  // We are signing on the client, so we expect there's going to be a session token:\n  url.searchParams.set('X-Amz-Security-Token', sessionToken)\n  url.searchParams.set('X-Amz-SignedHeaders', 'host')\n  // Those two are present only for Multipart Uploads:\n  if (partNumber) url.searchParams.set('partNumber', partNumber)\n  if (uploadId) url.searchParams.set('uploadId', uploadId)\n  url.searchParams.set('x-id', partNumber && uploadId ? 'UploadPart' : 'PutObject')\n\n  // Step 1: Create a canonical request\n  const canonical = createCanonicalRequest({\n    CanonicalUri,\n    CanonicalQueryString: url.search.slice(1),\n    SignedHeaders: {\n      host,\n    },\n    HashedPayload: payload,\n  })\n\n  // Step 2: Create a hash of the canonical request\n  const hashedCanonical = arrayBufferToHexString(await digest(canonical))\n\n  // Step 3: Create a string to sign\n  const stringToSign = [\n    `AWS4-HMAC-SHA256`, // The algorithm used to create the hash of the canonical request.\n    requestDateTime, // The date and time used in the credential scope.\n    scope, // The credential scope. This restricts the resulting signature to the specified Region and service.\n    hashedCanonical, // The hash of the canonical request.\n  ].join('\\n')\n\n  // Step 4: Calculate the signature\n  const kDate = await hash(`AWS4${accountSecret}`, date)\n  const kRegion = await hash(kDate, Region)\n  const kService = await hash(kRegion, Service)\n  const kSigning = await hash(kService, 'aws4_request')\n  const signature = arrayBufferToHexString(await hash(kSigning, stringToSign))\n\n  // Step 5: Add the signature to the request\n  url.searchParams.set('X-Amz-Signature', signature)\n\n  return url\n}\n"],"mappings":"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"}