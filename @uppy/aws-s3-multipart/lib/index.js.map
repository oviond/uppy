{"version":3,"names":["BasePlugin","RequestClient","EventManager","RateLimitedQueue","filterNonFailedFiles","filterFilesToEmitUploadStarted","createAbortError","MultipartUploader","pausingUploadReason","createSignedURL","packageJson","assertServerError","res","error","Error","message","Object","assign","removeMetadataFromURL","urlString","urlObject","URL","search","hash","href","getExpiry","credentials","expirationDate","Expiration","timeUntilExpiry","Math","floor","Date","now","undefined","getAllowedMetadata","_ref","meta","allowedMetaFields","querify","metaFields","keys","fromEntries","filter","key","map","realKey","value","String","throwIfAborted","signal","aborted","cause","reason","_abortMultipartUpload","_classPrivateFieldLooseKey","_cache","_createMultipartUpload","_fetchSignature","_getUploadParameters","_listParts","_previousRetryDelay","_requests","_retryDelays","_sendCompletionRequest","_setS3MultipartState","_uploadPartBytes","_getFile","_shouldRetry","_nonMultipartUpload","HTTPCommunicationQueue","constructor","requests","options","setS3MultipartState","getFile","defineProperty","_nonMultipartUpload2","_shouldRetry2","writable","WeakMap","_classPrivateFieldLooseBase","setOptions","wrapPromiseFunction","abortMultipartUpload","priority","createMultipartUpload","signPart","listParts","completeMultipartUpload","_options$retryDelays","retryDelays","uploadPartBytes","Infinity","getUploadParameters","getUploadId","file","cachedResult","get","data","promise","abortPromise","abort","delete","addEventListener","once","set","then","result","removeEventListener","abortFileUpload","create","awaitedResult","uploadFile","chunks","length","shouldUseMultipart","uploadId","parts","Promise","all","chunk","i","uploadChunk","abortOn","err","name","restoreUploadFile","uploadIdAndKey","resumeUploadFile","alreadyUploadedParts","partNumber","alreadyUploadedInfo","find","_ref2","PartNumber","setAsUploaded","ETag","signatureRetryIterator","values","chunkRetryIterator","shouldRetrySignature","next","done","chunkData","getData","onProgress","onComplete","signature","body","timeout","resolve","setTimeout","size","retryDelayIterator","_err$source","status","source","isPaused","limit","rateLimit","navigator","onLine","pause","window","resume","method","url","fields","headers","toUpperCase","formData","FormData","entries","forEach","_ref10","location","_companionCommunicationQueue","_client","_cachedTemporaryCredentials","_getTemporarySecurityCredentials","_setS3MultipartState2","_getFile2","_uploadLocalFile","_getCompanionClientArgs","_upload","_setCompanionHeaders","_setResumableUploadsCapability","_resetResumableCapability","_Symbol$for","Symbol","for","AwsS3Multipart","uppy","opts","_this$opts$rateLimite","_getCompanionClientArgs2","_uploadLocalFile2","_getTemporarySecurityCredentials2","_ref3","cFile","id","setFileState","s3Multipart","fileIDs","files","getFilesByIds","filesFiltered","filesToEmit","emit","promises","isRemote","getQueue","controller","AbortController","removedHandler","removedFile","on","uploadPromise","getRequestClientForFile","uploadRemoteFile","wrapSyncFunction","off","upload","setCompanionHeaders","companionHeaders","boolean","capabilities","getState","setState","resumableUploads","type","title","defaultOptions","bind","getTemporarySecurityCredentials","prepareUploadParts","_ref4","presignedUrls","number","rateLimitedQueue","uploaders","uploaderEvents","uploaderSockets","newOptions","resetUploaderReferences","fileID","really","remove","close","assertHost","companionUrl","metadata","post","filename","_ref5","encodeURIComponent","_ref6","uploadIdEnc","expires","accountKey","AccessKeyId","accountSecret","SecretAccessKey","sessionToken","SessionToken","bucketName","bucket","Region","region","Key","crypto","randomUUID","_ref7","_ref8","query","URLSearchParams","_ref9","reject","xhr","XMLHttpRequest","open","setRequestHeader","responseType","onabort","cleanup","ev","target","responseText","includes","loaded","lengthComputable","etag","getResponseHeader","console","warn","send","install","addPreProcessor","addUploader","uninstall","removePreProcessor","removeUploader","_this","bytesUploaded","bytesTotal","uploader","onError","log","onSuccess","uploadResp","uploadURL","onPartComplete","part","companionComm","arguments","getChunkSize","eventManager","onFileRemove","removed","onCancelAll","_temp","onFilePause","start","onPauseAll","onResumeAll","remote","protocol","VERSION","version"],"sources":["index.js"],"sourcesContent":["import BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport { RequestClient } from '@uppy/companion-client'\nimport EventManager from '@uppy/utils/lib/EventManager'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters'\nimport { createAbortError } from '@uppy/utils/lib/AbortController'\n\nimport MultipartUploader, { pausingUploadReason } from './MultipartUploader.js'\nimport createSignedURL from './createSignedURL.js'\nimport packageJson from '../package.json'\n\nfunction assertServerError (res) {\n  if (res && res.error) {\n    const error = new Error(res.message)\n    Object.assign(error, res.error)\n    throw error\n  }\n  return res\n}\n\nfunction removeMetadataFromURL (urlString) {\n  const urlObject = new URL(urlString)\n  urlObject.search = ''\n  urlObject.hash = ''\n  return urlObject.href\n}\n\n/**\n * Computes the expiry time for a request signed with temporary credentials. If\n * no expiration was provided, or an invalid value (e.g. in the past) is\n * provided, undefined is returned. This function assumes the client clock is in\n * sync with the remote server, which is a requirement for the signature to be\n * validated for AWS anyway.\n *\n * @param {import('../types/index.js').AwsS3STSResponse['credentials']} credentials\n * @returns {number | undefined}\n */\nfunction getExpiry (credentials) {\n  const expirationDate = credentials.Expiration\n  if (expirationDate) {\n    const timeUntilExpiry = Math.floor((new Date(expirationDate) - Date.now()) / 1000)\n    if (timeUntilExpiry > 9) {\n      return timeUntilExpiry\n    }\n  }\n  return undefined\n}\n\nfunction getAllowedMetadata ({ meta, allowedMetaFields, querify = false }) {\n  const metaFields = allowedMetaFields ?? Object.keys(meta)\n\n  if (!meta) return {}\n\n  return Object.fromEntries(\n    metaFields\n      .filter(key => meta[key] != null)\n      .map((key) => {\n        const realKey = querify ? `metadata[${key}]` : key\n        const value = String(meta[key])\n        return [realKey, value]\n      }),\n  )\n}\n\nfunction throwIfAborted (signal) {\n  if (signal?.aborted) { throw createAbortError('The operation was aborted', { cause: signal.reason }) }\n}\n\nclass HTTPCommunicationQueue {\n  #abortMultipartUpload\n\n  #cache = new WeakMap()\n\n  #createMultipartUpload\n\n  #fetchSignature\n\n  #getUploadParameters\n\n  #listParts\n\n  #previousRetryDelay\n\n  #requests\n\n  #retryDelays\n\n  #sendCompletionRequest\n\n  #setS3MultipartState\n\n  #uploadPartBytes\n\n  #getFile\n\n  constructor (requests, options, setS3MultipartState, getFile) {\n    this.#requests = requests\n    this.#setS3MultipartState = setS3MultipartState\n    this.#getFile = getFile\n    this.setOptions(options)\n  }\n\n  setOptions (options) {\n    const requests = this.#requests\n\n    if ('abortMultipartUpload' in options) {\n      this.#abortMultipartUpload = requests.wrapPromiseFunction(options.abortMultipartUpload, { priority:1 })\n    }\n    if ('createMultipartUpload' in options) {\n      this.#createMultipartUpload = requests.wrapPromiseFunction(options.createMultipartUpload, { priority:-1 })\n    }\n    if ('signPart' in options) {\n      this.#fetchSignature = requests.wrapPromiseFunction(options.signPart)\n    }\n    if ('listParts' in options) {\n      this.#listParts = requests.wrapPromiseFunction(options.listParts)\n    }\n    if ('completeMultipartUpload' in options) {\n      this.#sendCompletionRequest = requests.wrapPromiseFunction(options.completeMultipartUpload, { priority:1 })\n    }\n    if ('retryDelays' in options) {\n      this.#retryDelays = options.retryDelays ?? []\n    }\n    if ('uploadPartBytes' in options) {\n      this.#uploadPartBytes = requests.wrapPromiseFunction(options.uploadPartBytes, { priority:Infinity })\n    }\n    if ('getUploadParameters' in options) {\n      this.#getUploadParameters = requests.wrapPromiseFunction(options.getUploadParameters)\n    }\n  }\n\n  async #shouldRetry (err, retryDelayIterator) {\n    const requests = this.#requests\n    const status = err?.source?.status\n\n    // TODO: this retry logic is taken out of Tus. We should have a centralized place for retrying,\n    // perhaps the rate limited queue, and dedupe all plugins with that.\n    if (status == null) {\n      return false\n    }\n    if (status === 403 && err.message === 'Request has expired') {\n      if (!requests.isPaused) {\n        // We don't want to exhaust the retryDelayIterator as long as there are\n        // more than one request in parallel, to give slower connection a chance\n        // to catch up with the expiry set in Companion.\n        if (requests.limit === 1 || this.#previousRetryDelay == null) {\n          const next = retryDelayIterator.next()\n          if (next == null || next.done) {\n            return false\n          }\n          // If there are more than 1 request done in parallel, the RLQ limit is\n          // decreased and the failed request is requeued after waiting for a bit.\n          // If there is only one request in parallel, the limit can't be\n          // decreased, so we iterate over `retryDelayIterator` as we do for\n          // other failures.\n          // `#previousRetryDelay` caches the value so we can re-use it next time.\n          this.#previousRetryDelay = next.value\n        }\n        // No need to stop the other requests, we just want to lower the limit.\n        requests.rateLimit(0)\n        await new Promise(resolve => setTimeout(resolve, this.#previousRetryDelay))\n      }\n    } else if (status === 429) {\n      // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n      if (!requests.isPaused) {\n        const next = retryDelayIterator.next()\n        if (next == null || next.done) {\n          return false\n        }\n        requests.rateLimit(next.value)\n      }\n    } else if (status > 400 && status < 500 && status !== 409) {\n      // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n      return false\n    } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n      // The navigator is offline, let's wait for it to come back online.\n      if (!requests.isPaused) {\n        requests.pause()\n        window.addEventListener('online', () => {\n          requests.resume()\n        }, { once: true })\n      }\n    } else {\n      // Other error code means the request can be retried later.\n      const next = retryDelayIterator.next()\n      if (next == null || next.done) {\n        return false\n      }\n      await new Promise(resolve => setTimeout(resolve, next.value))\n    }\n    return true\n  }\n\n  async getUploadId (file, signal) {\n    let cachedResult\n    // As the cache is updated asynchronously, there could be a race condition\n    // where we just miss a new result so we loop here until we get nothing back,\n    // at which point it's out turn to create a new cache entry.\n    while ((cachedResult = this.#cache.get(file.data)) != null) {\n      try {\n        return await cachedResult\n      } catch {\n        // In case of failure, we want to ignore the cached error.\n        // At this point, either there's a new cached value, or we'll exit the loop a create a new one.\n      }\n    }\n\n    const promise = this.#createMultipartUpload(this.#getFile(file), signal)\n\n    const abortPromise = () => {\n      promise.abort(signal.reason)\n      this.#cache.delete(file.data)\n    }\n    signal.addEventListener('abort', abortPromise, { once: true })\n    this.#cache.set(file.data, promise)\n    promise.then(async (result) => {\n      signal.removeEventListener('abort', abortPromise)\n      this.#setS3MultipartState(file, result)\n      this.#cache.set(file.data, result)\n    }, () => {\n      signal.removeEventListener('abort', abortPromise)\n      this.#cache.delete(file.data)\n    })\n\n    return promise\n  }\n\n  async abortFileUpload (file) {\n    const result = this.#cache.get(file.data)\n    if (result == null) {\n      // If the createMultipartUpload request never was made, we don't\n      // need to send the abortMultipartUpload request.\n      return\n    }\n    // Remove the cache entry right away for follow-up requests do not try to\n    // use the soon-to-be aborted chached values.\n    this.#cache.delete(file.data)\n    this.#setS3MultipartState(file, Object.create(null))\n    let awaitedResult\n    try {\n      awaitedResult = await result\n    } catch {\n      // If the cached result rejects, there's nothing to abort.\n      return\n    }\n    await this.#abortMultipartUpload(this.#getFile(file), awaitedResult)\n  }\n\n  async #nonMultipartUpload (file, chunk, signal) {\n    const {\n      method = 'POST',\n      url,\n      fields,\n      headers,\n    } = await this.#getUploadParameters(this.#getFile(file), { signal }).abortOn(signal)\n\n    let body\n    const data = chunk.getData()\n    if (method.toUpperCase() === 'POST') {\n      const formData = new FormData()\n      Object.entries(fields).forEach(([key, value]) => formData.set(key, value))\n      formData.set('file', data)\n      body = formData\n    } else {\n      body = data\n    }\n\n    const { onProgress, onComplete } = chunk\n\n    const result = await this.#uploadPartBytes({\n      signature: { url, headers, method },\n      body,\n      size: data.size,\n      onProgress,\n      onComplete,\n      signal,\n    }).abortOn(signal)\n\n    return 'location' in result ? result : {\n      location: removeMetadataFromURL(url),\n      ...result,\n    }\n  }\n\n  /**\n   * @param {import(\"@uppy/core\").UppyFile} file\n   * @param {import(\"../types/chunk\").Chunk[]} chunks\n   * @param {AbortSignal} signal\n   * @returns {Promise<void>}\n   */\n  async uploadFile (file, chunks, signal) {\n    throwIfAborted(signal)\n    if (chunks.length === 1 && !chunks[0].shouldUseMultipart) {\n      return this.#nonMultipartUpload(file, chunks[0], signal)\n    }\n    const { uploadId, key } = await this.getUploadId(file, signal)\n    throwIfAborted(signal)\n    try {\n      const parts = await Promise.all(chunks.map((chunk, i) => this.uploadChunk(file, i + 1, chunk, signal)))\n      throwIfAborted(signal)\n      return await this.#sendCompletionRequest(\n        this.#getFile(file),\n        { key, uploadId, parts, signal },\n        signal,\n      ).abortOn(signal)\n    } catch (err) {\n      if (err?.cause !== pausingUploadReason && err?.name !== 'AbortError') {\n        // We purposefully don't wait for the promise and ignore its status,\n        // because we want the error `err` to bubble up ASAP to report it to the\n        // user. A failure to abort is not that big of a deal anyway.\n        this.abortFileUpload(file)\n      }\n      throw err\n    }\n  }\n\n  restoreUploadFile (file, uploadIdAndKey) {\n    this.#cache.set(file.data, uploadIdAndKey)\n  }\n\n  async resumeUploadFile (file, chunks, signal) {\n    throwIfAborted(signal)\n    if (chunks.length === 1 && chunks[0] != null && !chunks[0].shouldUseMultipart) {\n      return this.#nonMultipartUpload(file, chunks[0], signal)\n    }\n    const { uploadId, key } = await this.getUploadId(file, signal)\n    throwIfAborted(signal)\n    const alreadyUploadedParts = await this.#listParts(\n      this.#getFile(file),\n      { uploadId, key, signal },\n      signal,\n    ).abortOn(signal)\n    throwIfAborted(signal)\n    const parts = await Promise.all(\n      chunks\n        .map((chunk, i) => {\n          const partNumber = i + 1\n          const alreadyUploadedInfo = alreadyUploadedParts.find(({ PartNumber }) => PartNumber === partNumber)\n          if (alreadyUploadedInfo == null) {\n            return this.uploadChunk(file, partNumber, chunk, signal)\n          }\n          // Already uploaded chunks are set to null. If we are restoring the upload, we need to mark it as already uploaded.\n          chunk?.setAsUploaded?.()\n          return { PartNumber: partNumber, ETag: alreadyUploadedInfo.ETag }\n        }),\n    )\n    throwIfAborted(signal)\n    return this.#sendCompletionRequest(\n      this.#getFile(file),\n      { key, uploadId, parts, signal },\n      signal,\n    ).abortOn(signal)\n  }\n\n  /**\n   *\n   * @param {import(\"@uppy/core\").UppyFile} file\n   * @param {number} partNumber\n   * @param {import(\"../types/chunk\").Chunk} chunk\n   * @param {AbortSignal} signal\n   * @returns {Promise<object>}\n   */\n  async uploadChunk (file, partNumber, chunk, signal) {\n    throwIfAborted(signal)\n    const { uploadId, key } = await this.getUploadId(file, signal)\n\n    const signatureRetryIterator = this.#retryDelays.values()\n    const chunkRetryIterator = this.#retryDelays.values()\n    const shouldRetrySignature = () => {\n      const next = signatureRetryIterator.next()\n      if (next == null || next.done) {\n        return null\n      }\n      return next.value\n    }\n\n    for (;;) {\n      throwIfAborted(signal)\n      const chunkData = chunk.getData()\n      const { onProgress, onComplete } = chunk\n      let signature\n\n      try {\n        signature = await this.#fetchSignature(this.#getFile(file), {\n          uploadId, key, partNumber, body: chunkData, signal,\n        }).abortOn(signal)\n      } catch (err) {\n        const timeout = shouldRetrySignature()\n        if (timeout == null || signal.aborted) {\n          throw err\n        }\n        await new Promise(resolve => setTimeout(resolve, timeout))\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      throwIfAborted(signal)\n      try {\n        return {\n          PartNumber: partNumber,\n          ...await this.#uploadPartBytes({\n            signature, body: chunkData, size: chunkData.size, onProgress, onComplete, signal,\n          }).abortOn(signal),\n        }\n      } catch (err) {\n        if (!await this.#shouldRetry(err, chunkRetryIterator)) throw err\n      }\n    }\n  }\n}\n\nexport default class AwsS3Multipart extends BasePlugin {\n  static VERSION = packageJson.version\n\n  #companionCommunicationQueue\n\n  #client\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'AwsS3Multipart'\n    this.title = 'AWS S3 Multipart'\n    this.#client = new RequestClient(uppy, opts)\n\n    const defaultOptions = {\n      // TODO: null here means “include all”, [] means include none.\n      // This is inconsistent with @uppy/aws-s3 and @uppy/transloadit\n      allowedMetaFields: null,\n      limit: 6,\n      shouldUseMultipart: (file) => file.size !== 0, // TODO: Switch default to:\n      // eslint-disable-next-line no-bitwise\n      // shouldUseMultipart: (file) => file.size >> 10 >> 10 > 100,\n      retryDelays: [0, 1000, 3000, 5000],\n      createMultipartUpload: this.createMultipartUpload.bind(this),\n      listParts: this.listParts.bind(this),\n      abortMultipartUpload: this.abortMultipartUpload.bind(this),\n      completeMultipartUpload: this.completeMultipartUpload.bind(this),\n      getTemporarySecurityCredentials: false,\n      signPart: opts?.getTemporarySecurityCredentials ? this.createSignedURL.bind(this) : this.signPart.bind(this),\n      uploadPartBytes: AwsS3Multipart.uploadPartBytes,\n      getUploadParameters: opts?.getTemporarySecurityCredentials\n        ? this.createSignedURL.bind(this)\n        : this.getUploadParameters.bind(this),\n      companionHeaders: {},\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n    if (opts?.prepareUploadParts != null && opts.signPart == null) {\n      this.opts.signPart = async (file, { uploadId, key, partNumber, body, signal }) => {\n        const { presignedUrls, headers } = await opts\n          .prepareUploadParts(file, { uploadId, key, parts: [{ number: partNumber, chunk: body }], signal })\n        return { url: presignedUrls?.[partNumber], headers: headers?.[partNumber] }\n      }\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = this.opts.rateLimitedQueue ?? new RateLimitedQueue(this.opts.limit)\n    this.#companionCommunicationQueue = new HTTPCommunicationQueue(\n      this.requests,\n      this.opts,\n      this.#setS3MultipartState,\n      this.#getFile,\n    )\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n  }\n\n  [Symbol.for('uppy test: getClient')] () { return this.#client }\n\n  setOptions (newOptions) {\n    this.#companionCommunicationQueue.setOptions(newOptions)\n    super.setOptions(newOptions)\n    this.#setCompanionHeaders()\n  }\n\n  /**\n   * Clean up all references for a file's upload: the MultipartUploader instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.\n   * This should be done when the user cancels the upload, not when the upload is completed or errored.\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      this.uploaders[fileID].abort({ really: opts.abort || false })\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close()\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  // TODO: make this a private method in the next major\n  assertHost (method) {\n    if (!this.opts.companionUrl) {\n      throw new Error(`Expected a \\`companionUrl\\` option containing a Companion address, or if you are not using Companion, a custom \\`${method}\\` implementation.`)\n    }\n  }\n\n  createMultipartUpload (file, signal) {\n    this.assertHost('createMultipartUpload')\n    throwIfAborted(signal)\n\n    const metadata = getAllowedMetadata({ meta: file.meta, allowedMetaFields: this.opts.allowedMetaFields })\n\n    return this.#client.post('s3/multipart', {\n      filename: file.name,\n      type: file.type,\n      metadata,\n    }, { signal }).then(assertServerError)\n  }\n\n  listParts (file, { key, uploadId }, signal) {\n    this.assertHost('listParts')\n    throwIfAborted(signal)\n\n    const filename = encodeURIComponent(key)\n    return this.#client.get(`s3/multipart/${uploadId}?key=${filename}`, { signal })\n      .then(assertServerError)\n  }\n\n  completeMultipartUpload (file, { key, uploadId, parts }, signal) {\n    this.assertHost('completeMultipartUpload')\n    throwIfAborted(signal)\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.#client.post(`s3/multipart/${uploadIdEnc}/complete?key=${filename}`, { parts }, { signal })\n      .then(assertServerError)\n  }\n\n  /**\n   * @type {import(\"../types\").AwsS3STSResponse | Promise<import(\"../types\").AwsS3STSResponse>}\n   */\n  #cachedTemporaryCredentials\n\n  async #getTemporarySecurityCredentials (options) {\n    throwIfAborted(options?.signal)\n\n    if (this.#cachedTemporaryCredentials == null) {\n      // We do not await it just yet, so concurrent calls do not try to override it:\n      if (this.opts.getTemporarySecurityCredentials === true) {\n        this.assertHost('getTemporarySecurityCredentials')\n        this.#cachedTemporaryCredentials = this.#client.get('s3/sts', null, options).then(assertServerError)\n      } else {\n        this.#cachedTemporaryCredentials = this.opts.getTemporarySecurityCredentials(options)\n      }\n      this.#cachedTemporaryCredentials = await this.#cachedTemporaryCredentials\n      setTimeout(() => {\n        // At half the time left before expiration, we clear the cache. That's\n        // an arbitrary tradeoff to limit the number of requests made to the\n        // remote while limiting the risk of using an expired token in case the\n        // clocks are not exactly synced.\n        // The HTTP cache should be configured to ensure a client doesn't request\n        // more tokens than it needs, but this timeout provides a second layer of\n        // security in case the HTTP cache is disabled or misconfigured.\n        this.#cachedTemporaryCredentials = null\n      }, (getExpiry(this.#cachedTemporaryCredentials.credentials) || 0) * 500)\n    }\n\n    return this.#cachedTemporaryCredentials\n  }\n\n  async createSignedURL (file, options) {\n    const data = await this.#getTemporarySecurityCredentials(options)\n    const expires = getExpiry(data.credentials) || 604_800 // 604 800 is the max value accepted by AWS.\n\n    const { uploadId, key, partNumber, signal } = options\n\n    // Return an object in the correct shape.\n    return {\n      method: 'PUT',\n      expires,\n      fields: {},\n      url: `${await createSignedURL({\n        accountKey: data.credentials.AccessKeyId,\n        accountSecret: data.credentials.SecretAccessKey,\n        sessionToken: data.credentials.SessionToken,\n        expires,\n        bucketName: data.bucket,\n        Region: data.region,\n        Key: key ?? `${crypto.randomUUID()}-${file.name}`,\n        uploadId,\n        partNumber,\n        signal,\n      })}`,\n      // Provide content type header required by S3\n      headers: {\n        'Content-Type': file.type,\n      },\n    }\n  }\n\n  signPart (file, { uploadId, key, partNumber, signal }) {\n    this.assertHost('signPart')\n    throwIfAborted(signal)\n\n    if (uploadId == null || key == null || partNumber == null) {\n      throw new Error('Cannot sign without a key, an uploadId, and a partNumber')\n    }\n\n    const filename = encodeURIComponent(key)\n    return this.#client.get(`s3/multipart/${uploadId}/${partNumber}?key=${filename}`, { signal })\n      .then(assertServerError)\n  }\n\n  abortMultipartUpload (file, { key, uploadId }, signal) {\n    this.assertHost('abortMultipartUpload')\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.#client.delete(`s3/multipart/${uploadIdEnc}?key=${filename}`, undefined, { signal })\n      .then(assertServerError)\n  }\n\n  getUploadParameters (file, options) {\n    const { meta } = file\n    const { type, name: filename } = meta\n    const metadata = getAllowedMetadata({ meta, allowedMetaFields: this.opts.allowedMetaFields, querify: true })\n\n    const query = new URLSearchParams({ filename, type, ...metadata })\n\n    return this.#client.get(`s3/params?${query}`, options)\n  }\n\n  static async uploadPartBytes ({ signature: { url, expires, headers, method = 'PUT' }, body, size = body.size, onProgress, onComplete, signal }) {\n    throwIfAborted(signal)\n\n    if (url == null) {\n      throw new Error('Cannot upload to an undefined URL')\n    }\n\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest()\n      xhr.open(method, url, true)\n      if (headers) {\n        Object.keys(headers).forEach((key) => {\n          xhr.setRequestHeader(key, headers[key])\n        })\n      }\n      xhr.responseType = 'text'\n      if (typeof expires === 'number') {\n        xhr.timeout = expires * 1000\n      }\n\n      function onabort () {\n        xhr.abort()\n      }\n      function cleanup () {\n        signal.removeEventListener('abort', onabort)\n      }\n      signal.addEventListener('abort', onabort)\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        onProgress(ev)\n      })\n\n      xhr.addEventListener('abort', () => {\n        cleanup()\n\n        reject(createAbortError())\n      })\n\n      xhr.addEventListener('timeout', () => {\n        cleanup()\n\n        const error = new Error('Request has expired')\n        error.source = { status: 403 }\n        reject(error)\n      })\n      xhr.addEventListener('load', (ev) => {\n        cleanup()\n\n        if (ev.target.status === 403 && ev.target.responseText.includes('<Message>Request has expired</Message>')) {\n          const error = new Error('Request has expired')\n          error.source = ev.target\n          reject(error)\n          return\n        } if (ev.target.status < 200 || ev.target.status >= 300) {\n          const error = new Error('Non 2xx')\n          error.source = ev.target\n          reject(error)\n          return\n        }\n\n        // todo make a proper onProgress API (breaking change)\n        onProgress?.({ loaded: size, lengthComputable: true })\n\n        // NOTE This must be allowed by CORS.\n        const etag = ev.target.getResponseHeader('ETag')\n        const location = ev.target.getResponseHeader('Location')\n\n        if (method.toUpperCase() === 'POST' && location === null) {\n          // Not being able to read the Location header is not a fatal error.\n          // eslint-disable-next-line no-console\n          console.warn('AwsS3/Multipart: Could not read the Location header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.')\n        }\n        if (etag === null) {\n          reject(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'))\n          return\n        }\n\n        onComplete?.(etag)\n        resolve({\n          ETag: etag,\n          ...(location ? { location } : undefined),\n        })\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        cleanup()\n\n        const error = new Error('Unknown error')\n        error.source = ev.target\n        reject(error)\n      })\n\n      xhr.send(body)\n    })\n  }\n\n  #setS3MultipartState = (file, { key, uploadId }) => {\n    const cFile = this.uppy.getFile(file.id)\n    if (cFile == null) {\n      // file was removed from store\n      return\n    }\n\n    this.uppy.setFileState(file.id, {\n      s3Multipart: {\n        ...cFile.s3Multipart,\n        key,\n        uploadId,\n      },\n    })\n  }\n\n  #getFile = (file) => {\n    return this.uppy.getFile(file.id) || file\n  }\n\n  #uploadLocalFile (file) {\n    return new Promise((resolve, reject) => {\n      const onProgress = (bytesUploaded, bytesTotal) => {\n        this.uppy.emit('upload-progress', this.uppy.getFile(file.id), {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      const onError = (err) => {\n        this.uppy.log(err)\n        this.uppy.emit('upload-error', file, err)\n\n        this.resetUploaderReferences(file.id)\n        reject(err)\n      }\n\n      const onSuccess = (result) => {\n        const uploadResp = {\n          body: {\n            ...result,\n          },\n          uploadURL: result.location,\n        }\n\n        this.resetUploaderReferences(file.id)\n\n        this.uppy.emit('upload-success', this.#getFile(file), uploadResp)\n\n        if (result.location) {\n          this.uppy.log(`Download ${file.name} from ${result.location}`)\n        }\n\n        resolve()\n      }\n\n      const onPartComplete = (part) => {\n        this.uppy.emit('s3-multipart:part-uploaded', this.#getFile(file), part)\n      }\n\n      const upload = new MultipartUploader(file.data, {\n        // .bind to pass the file object to each handler.\n        companionComm: this.#companionCommunicationQueue,\n\n        log: (...args) => this.uppy.log(...args),\n        getChunkSize: this.opts.getChunkSize ? this.opts.getChunkSize.bind(this) : null,\n\n        onProgress,\n        onError,\n        onSuccess,\n        onPartComplete,\n\n        file,\n        shouldUseMultipart: this.opts.shouldUseMultipart,\n\n        ...file.s3Multipart,\n      })\n\n      this.uploaders[file.id] = upload\n      const eventManager = new EventManager(this.uppy)\n      this.uploaderEvents[file.id] = eventManager\n\n      eventManager.onFileRemove(file.id, (removed) => {\n        upload.abort()\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${removed.id} was removed`)\n      })\n\n      eventManager.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          upload.abort()\n          this.resetUploaderReferences(file.id, { abort: true })\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      eventManager.onFilePause(file.id, (isPaused) => {\n        if (isPaused) {\n          upload.pause()\n        } else {\n          upload.start()\n        }\n      })\n\n      eventManager.onPauseAll(file.id, () => {\n        upload.pause()\n      })\n\n      eventManager.onResumeAll(file.id, () => {\n        upload.start()\n      })\n\n      upload.start()\n    })\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  #getCompanionClientArgs (file) {\n    return {\n      ...file.remote.body,\n      protocol: 's3-multipart',\n      size: file.data.size,\n      metadata: file.meta,\n    }\n  }\n\n  #upload = async (fileIDs) => {\n    if (fileIDs.length === 0) return undefined\n\n    const files = this.uppy.getFilesByIds(fileIDs)\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n\n    this.uppy.emit('upload-start', filesToEmit)\n\n    const promises = filesFiltered.map((file) => {\n      if (file.isRemote) {\n        const getQueue = () => this.requests\n        this.#setResumableUploadsCapability(false)\n        const controller = new AbortController()\n\n        const removedHandler = (removedFile) => {\n          if (removedFile.id === file.id) controller.abort()\n        }\n        this.uppy.on('file-removed', removedHandler)\n\n        const uploadPromise = this.uppy.getRequestClientForFile(file).uploadRemoteFile(\n          file,\n          this.#getCompanionClientArgs(file),\n          { signal: controller.signal, getQueue },\n        )\n\n        this.requests.wrapSyncFunction(() => {\n          this.uppy.off('file-removed', removedHandler)\n        }, { priority: -1 })()\n\n        return uploadPromise\n      }\n\n      return this.#uploadLocalFile(file)\n    })\n\n    const upload = await Promise.all(promises)\n    // After the upload is done, another upload may happen with only local files.\n    // We reset the capability so that the next upload can use resumable uploads.\n    this.#setResumableUploadsCapability(true)\n    return upload\n  }\n\n  #setCompanionHeaders = () => {\n    this.#client.setCompanionHeaders(this.opts.companionHeaders)\n  }\n\n  #setResumableUploadsCapability = (boolean) => {\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        resumableUploads: boolean,\n      },\n    })\n  }\n\n  #resetResumableCapability = () => {\n    this.#setResumableUploadsCapability(true)\n  }\n\n  install () {\n    this.#setResumableUploadsCapability(true)\n    this.uppy.addPreProcessor(this.#setCompanionHeaders)\n    this.uppy.addUploader(this.#upload)\n    this.uppy.on('cancel-all', this.#resetResumableCapability)\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.#setCompanionHeaders)\n    this.uppy.removeUploader(this.#upload)\n    this.uppy.off('cancel-all', this.#resetResumableCapability)\n  }\n}\n"],"mappings":"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"}