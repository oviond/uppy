{"version":3,"names":[],"sources":["CommonTypes.d.ts"],"sourcesContent":["import type { Uppy } from '@uppy/core'\n\n// Helper to exclude a key\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\n\n// If I use the helper it doesn't work, I think because 'target' is not a `keyof T` while\n// the generic T is unknown, so will just use the expansion here\ntype OmitTarget<T> = Pick<T, Exclude<keyof T, 'target'>>\n\nexport type WithBaseUppyProps<T> = T & { uppy: Uppy }\nexport type ToUppyProps<T> = WithBaseUppyProps<OmitTarget<T>>\n"],"mappings":""}